
R version 2.13.0 Patched (2011-04-26 r55655)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-apple-darwin9.8.0/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Dennis Schnabel example
> 
> library("nleqslv")
>     
> dslnex <- function(x) {
+     y <- numeric(2)
+     y[1] <- x[1]^2 + x[2]^2 - 2
+     y[2] <- exp(x[1]-1) + x[2]^3 - 2
+     y
+ }
> 
> jacdsln <- function(x) {
+     n <- length(x)
+     Df <- matrix(numeric(n*n),n,n)
+     Df[1,1] <- 2*x[1]
+     Df[1,2] <- 2*x[2]
+     Df[2,1] <- exp(x[1]-1)
+     Df[2,2] <- 3*x[2]^2
+ 
+     Df
+ }
> 
> xstart <- c(2,0.5)
> fstart <- dslnex(xstart)
> xstart
[1] 2.0 0.5
> fstart
[1] 2.2500000 0.8432818
> 
> # a solution is c(1,1) 
> 
> do.print.xf <- FALSE
> 
> print.result <- function(z) {
+     if( do.print.xf ) {
+         print(z$x)
+         print(z$fvec)
+     }
+     print(z$message)
+     print(all(abs(z$fvec)<=1e-8))
+ }
> 
> # Use automatic scaling of x-values. Dosn't always work.
> 
> # Broyden numerical Jacobian
> for( z in c("qline", "gline") ) {  # quadratic, geometric linesearch
+     znlq <- nleqslv(xstart, dslnex, global=z,xscalm="auto",control=list(btol=.01)) 
+     print.result(znlq)
+ }
[1] "Function criterion near zero"
[1] TRUE
[1] "Function criterion near zero"
[1] TRUE
> 
> # Broyden numerical Jacobian
> for( z in c("dbldog","pwldog") ) {  # double dogleg, Powell (single) dogleg        
+     for( delta in c(-1.0, -2.0) ) { # Cauchy step , Newton step
+         znlq <- nleqslv(xstart, dslnex, global=z,xscalm="auto", control=list(btol=.01,delta=delta))
+         print.result(znlq)
+     }
+ }
[1] "Function criterion near zero"
[1] TRUE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
[1] "Function criterion near zero"
[1] TRUE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
> 
> # Broyden analytical jacobian
> for( z in c("dbldog","pwldog") ) {  # double dogleg, Powell (single) dogleg        
+     for( delta in c(-1.0, -2.0) ) { # Cauchy step , Newton step
+         znlq <- nleqslv(xstart, dslnex, jacdsln, global=z,xscalm="auto", control=list(btol=.01,delta=delta))
+         print.result(znlq)
+     }
+ }
[1] "Function criterion near zero"
[1] TRUE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
[1] "Function criterion near zero"
[1] TRUE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
> 
> # Newton analytical jacobian
> for( z in c("dbldog","pwldog") ) {  # double dogleg, Powell (single) dogleg        
+     for( delta in c(-1.0, -2.0) ) { # Cauchy step , Newton step
+         znlq <- nleqslv(xstart, dslnex, jacdsln, method="Newton", global=z,xscalm="auto", control=list(btol=.01,delta=delta))
+         print.result(znlq)
+     }
+ }
[1] "No better point found (algorithm has stalled)"
[1] FALSE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
[1] "No better point found (algorithm has stalled)"
[1] FALSE
> 
